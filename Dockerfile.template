ARG OS_VERSION=18.04
ARG RUBY_MAJOR=2.6

FROM ubuntu:${OS_VERSION}

RUN if [ "$RUBY_MAJOR" = "2.3" ] ; \
      then \
      export RUBY_VERSION=2.3.7 ; \
      export RUBY_DOWNLOAD_SHA256=c61f8f2b9d3ffff5567e186421fa191f0d5e7c2b189b426bb84498825d548edb ; \
#    elif [ "$RUBY_MAJOR" == "2.4" ] ; \
#      then \
#      export RUBY_VERSION=2.3.7 ; \
#      export RUBY_DOWNLOAD_SHA256=c61f8f2b9d3ffff5567e186421fa191f0d5e7c2b189b426bb84498825d548edb ; \
#    elif [ "$RUBY_MAJOR" == "2.5" ] ; \
#      then \
#      export RUBY_VERSION=2.3.7 ; \
#      export RUBY_DOWNLOAD_SHA256=c61f8f2b9d3ffff5567e186421fa191f0d5e7c2b189b426bb84498825d548edb ; \
#    elif [ "$RUBY_MAJOR" == "2.6" ] ; \
#      then \
#      export RUBY_VERSION=2.3.7 ; \
#      export RUBY_DOWNLOAD_SHA256=c61f8f2b9d3ffff5567e186421fa191f0d5e7c2b189b426bb84498825d548edb ; \
    fi

RUN echo $RUBY_VERSION
RUN echo $RUBY_DOWNLOAD_SHA256
RUN env

#RUN apt-get update \
#	&& apt-get install -y --no-install-recommends \
#		bzip2 \
#		ca-certificates \
#		libffi-dev \
#		libgdbm3 \
#		libssl-dev \
#		libyaml-dev \
#		procps \
#		zlib1g-dev \
#		tzdata \
#	&& rm -rf /var/lib/apt/lists/*
#
## skip installing gem documentation
#RUN mkdir -p /usr/local/etc \
#	&& { \
#		echo 'install: --no-document'; \
#		echo 'update: --no-document'; \
#	} >> /usr/local/etc/gemrc
#
## some of ruby's build scripts are written in ruby
##   we purge system ruby later to make sure our final image uses what we just built
#RUN set -ex \
#	\
#	&& buildDeps=' \
#		autoconf \
#		bison \
#		dpkg-dev \
#		gcc \
#		libbz2-dev \
#		libgdbm-dev \
#		libglib2.0-dev \
#		libncurses-dev \
#		libreadline-dev \
#		libxml2-dev \
#		libxslt-dev \
#		make \
#		ruby \
#		wget \
#		xz-utils \
#	' \
#	&& apt-get update \
#	&& apt-get install -y --no-install-recommends $buildDeps \
#	&& rm -rf /var/lib/apt/lists/* \
#	\
#	&& wget -O ruby.tar.xz "https://cache.ruby-lang.org/pub/ruby/${RUBY_MAJOR%-rc}/ruby-$RUBY_VERSION.tar.xz" \
#	&& echo "$RUBY_DOWNLOAD_SHA256 *ruby.tar.xz" | sha256sum -c - \
#	\
#	&& mkdir -p /usr/src/ruby \
#	&& tar -xJf ruby.tar.xz -C /usr/src/ruby --strip-components=1 \
#	&& rm ruby.tar.xz \
#	\
#	&& cd /usr/src/ruby \
#	\
## hack in "ENABLE_PATH_CHECK" disabling to suppress:
##   warning: Insecure world writable dir
#	&& { \
#		echo '#define ENABLE_PATH_CHECK 0'; \
#		echo; \
#		cat file.c; \
#	} > file.c.new \
#	&& mv file.c.new file.c \
#	\
#	&& autoconf \
#	&& gnuArch="$(dpkg-architecture -qDEB_BUILD_GNU_TYPE)" \
#	&& ./configure \
#		--build="$gnuArch" \
#		--disable-install-doc \
#		--enable-shared \
#	&& make -j "$(nproc)" \
#	&& make install \
#	\
#	&& dpkg-query --show --showformat '${package}\n' \
#		| grep -P '^libreadline\d+$' \
#		| xargs apt-mark manual \
#	&& apt-get purge -y --auto-remove $buildDeps \
#	&& cd / \
#	&& rm -r /usr/src/ruby \
## make sure bundled "rubygems" is older than RUBYGEMS_VERSION (https://github.com/docker-library/ruby/issues/246)
#	&& ruby -e 'exit(Gem::Version.create(ENV["RUBYGEMS_VERSION"]) > Gem::Version.create(Gem::VERSION))' \
#	&& gem update --system "$RUBYGEMS_VERSION" && rm -r /root/.gem/ \
#
## install things globally, for great justice
## and don't create ".bundle" in all our apps
#ENV GEM_HOME /usr/local/bundle
#ENV BUNDLE_PATH="$GEM_HOME" \
#	BUNDLE_SILENCE_ROOT_WARNING=1 \
#	BUNDLE_APP_CONFIG="$GEM_HOME"
## path recommendation: https://github.com/bundler/bundler/pull/6469#issuecomment-383235438
#ENV PATH $GEM_HOME/bin:$BUNDLE_PATH/gems/bin:$PATH
## adjust permissions of a few directories for running "gem install" as an arbitrary user
#RUN mkdir -p "$GEM_HOME" && chmod 777 "$GEM_HOME"
## (BUNDLE_PATH = GEM_HOME, no need to mkdir/chown both)
#
#CMD [ "irb" ]
